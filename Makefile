.PHONY: clean

STATIC_BUILD ?= 0

ifneq (${OS}, Windows_NT)
	UNAME_S = $(shell uname -s)
	ifeq (${UNAME_S}, Linux)
		LINUX_ID = $(shell lsb_release --id --short)
		LINUX_RELEASE = $(shell lsb_release --release --short)
		SUFFIX = ${LINUX_ID}_${LINUX_RELEASE}
	endif
	ifeq (${UNAME_S}, Darwin)
		# TODO: Target macOS
		SUFFIX = macOS
	endif
else
	# TODO: Target Win32 (e.g. MinGW, Cygwin)
	SUFFIX = Win32
endif

EXECUTABLE_DIRECTORY = bin
OBJECT_DIRECTORY = obj
SOURCE_DIRECTORY = src
LIBRARY_DIRECTORY = lib
INCLUDE_DIRECTORY = include
SHADERS_DIRECTORY = examples
EXECUTABLE = ${EXECUTABLE_DIRECTORY}/shadertest
DISTRIBUTABLE = ${EXECUTABLE_DIRECTORY}/ShaderTest_${SUFFIX}.zip
WARNINGS = -Wall -Wextra -Wpedantic
CXX_STANDARD = -std=c++17

ifeq (${STATIC_BUILD}, 1)
GLFW_LIBRARY = -L"${LIBRARY_DIRECTORY}" -l:libglfw3.a
else
GLFW_LIBRARY = $$(pkg-config --libs glfw3)
endif
INCLUDES = -I${INCLUDE_DIRECTORY} ${GLFW_INCLUDE}
LIBRARIES = ${GLFW_LIBRARY}

DEBUG_HXX = ${SOURCE_DIRECTORY}/debug.hxx
GRAPHICS_CXX = ${SOURCE_DIRECTORY}/graphics.cxx
GRAPHICS_HXX = ${SOURCE_DIRECTORY}/graphics.hxx
GRAPHICS_OBJ = ${OBJECT_DIRECTORY}/graphics.o
ICON_HXX = ${SOURCE_DIRECTORY}/icon.hxx
IO_CXX = ${SOURCE_DIRECTORY}/io.cxx
IO_HXX = ${SOURCE_DIRECTORY}/io.hxx
IO_OBJ = ${OBJECT_DIRECTORY}/io.o
MAIN_CXX = ${SOURCE_DIRECTORY}/main.cxx
MAIN_OBJ = ${OBJECT_DIRECTORY}/main.o
MODELS_CXX = ${SOURCE_DIRECTORY}/models.cxx
MODELS_HXX = ${SOURCE_DIRECTORY}/models.hxx
MODELS_OBJ = ${OBJECT_DIRECTORY}/models.o
PARAMETERS_CXX = ${SOURCE_DIRECTORY}/parameters.cxx
PARAMETERS_HXX = ${SOURCE_DIRECTORY}/parameters.hxx
PARAMETERS_OBJ = ${OBJECT_DIRECTORY}/parameters.o
WINDOW_CXX = ${SOURCE_DIRECTORY}/window.cxx
WINDOW_HXX = ${SOURCE_DIRECTORY}/window.hxx
WINDOW_OBJ = ${OBJECT_DIRECTORY}/window.o

DEFAULT_FRAG = ${SOURCE_DIRECTORY}/default.frag
DEFAULT_VERT = ${SOURCE_DIRECTORY}/default.vert

release: DEFINES =
release: OPTIMIZATIONS = -O3
release: ${EXECUTABLE}

debug: DEFINES = -DDEBUG -g
debug: OPTIMIZATIONS = -Og
debug: ${EXECUTABLE}

dist: ${DISTRIBUTABLE}

ifeq (${STATIC_BUILD}, 0)
LIBGLFW = bin/libglfw.so
${LIBGLFW}:
	cp $$(dpkg -L libglfw3-dev | grep libglfw.so) ${EXECUTABLE_DIRECTORY}/
else
LIBGLFW = bin/libglfw.stub
${LIBGLFW}:
	touch "$@"
endif

${DISTRIBUTABLE}: ${EXECUTABLE}
	zip -r ${DISTRIBUTABLE} ${EXECUTABLE} ${EXECUTABLE_DIRECTORY}/*.so ${SHADERS_DIRECTORY}

${EXECUTABLE}: ${EXECUTABLE_DIRECTORY} ${OBJECT_DIRECTORY} ${GRAPHICS_OBJ} ${IO_OBJ} ${MAIN_OBJ} ${MODELS_OBJ} ${PARAMETERS_OBJ} ${WINDOW_OBJ} ${LIBGLFW}
	${CXX} -o $@ ${OBJECT_DIRECTORY}/*.o ${LIBRARIES}

${EXECUTABLE_DIRECTORY}:
	mkdir -p ${EXECUTABLE_DIRECTORY}

${OBJECT_DIRECTORY}:
	mkdir -p ${OBJECT_DIRECTORY}

${GRAPHICS_OBJ}: ${GRAPHICS_CXX} ${GRAPHICS_HXX} ${DEBUG_HXX} ${DEFAULT_FRAG} ${DEFAULT_VERT} ${MODELS_HXX}
	${CXX} -c -o $@ $< ${WARNINGS} ${DEFINES} ${OPTIMIZATIONS} ${CXX_STANDARD} ${INCLUDES}

${IO_OBJ}: ${IO_CXX} ${IO_HXX} ${DEBUG_HXX}
	${CXX} -c -o $@ $< ${WARNINGS} ${DEFINES} ${OPTIMIZATIONS} ${CXX_STANDARD} ${INCLUDES}

${MAIN_OBJ}: ${MAIN_CXX} ${DEBUG_HXX} ${GRAPHICS_HXX} ${IO_HXX} ${PARAMETERS_HXX} ${WINDOW_HXX}
	${CXX} -c -o $@ $< ${WARNINGS} ${DEFINES} ${OPTIMIZATIONS} ${CXX_STANDARD} ${INCLUDES}

${MODELS_OBJ}: ${MODELS_CXX} ${MODELS_HXX}
	${CXX} -c -o $@ $< ${WARNINGS} ${DEFINES} ${OPTIMIZATIONS} ${CXX_STANDARD} ${INCLUDES}

${PARAMETERS_OBJ}: ${PARAMETERS_CXX} ${PARAMETERS_HXX}
	${CXX} -c -o $@ $< ${WARNINGS} ${DEFINES} ${OPTIMIZATIONS} ${CXX_STANDARD} ${INCLUDES}

${WINDOW_OBJ}: ${WINDOW_CXX} ${WINDOW_HXX} ${ICON_HXX}
	${CXX} -c -o $@ $< ${WARNINGS} ${DEFINES} ${OPTIMIZATIONS} ${CXX_STANDARD} ${INCLUDES}

clean:
	rm -rf ${EXECUTABLE_DIRECTORY} ${OBJECT_DIRECTORY}
